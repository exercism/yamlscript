!yamlscript/v0

defn run(capacity operations):
  buffer =: -{:B V(capacity * [nil]), :P 0}
  reduce _ buffer operations:
    fn(buffer op):
      op item pass want =:
        op.slice('operation' 'item'
                 'should_succeed' 'expected')
      args =:
        condp eq op:
          -'clear'     : -[buffer]
          -'read'      : -[buffer pass want]
          -'write'     : -[buffer pass item]
          -'overwrite' : -[buffer pass item]
      value("op-$op"): args*
  =>: -{}

defn op-clear(buffer):
  hash-map: :B V(buffer.B.# * [nil]) :P 0

defn op-read(buffer pass want):
  cell =: buffer.B.nth(buffer.P)
  when pass:
    when cell:nil?:
      die: S("Can't read:\ " buffer)
    when cell != want:
      die: "Bad read:\ $cell != $want ($buffer)"
  hash-map:
    :B update-in(buffer.B [buffer.P] constantly(nil))
    :P (buffer.P.++ % buffer.B.#)

defn op-write(buffer pass item):
  B P =: buffer.slice(q(B P))
  I =:
    reduce _ nil concat(range(P B.#) range(0 P)):
      fn(idx i): idx || (not(B.$i) && i)

  if I:
    update-in: buffer [:B I] constantly(item)
    when pass: die('Full buffer')

defn op-overwrite(buffer pass item):
  if some(nil? buffer.B):
    op-write: buffer pass item
    else:
      buffer =:
        update-in: buffer [:B buffer.P] constantly(item)
      P =: buffer.P.++ % buffer.B.#
      update-in: buffer [:P] constantly(P)
