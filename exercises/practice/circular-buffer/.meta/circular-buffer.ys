!YS-v0

defn run(capacity operations):
  buffer =: qm(:B (capacity * [nil]), :P 0)
  reduce _ buffer operations:
    fn(buffer op):
      op item pass want =:
        slice op:: [operation, item,
                    should_succeed, expected]
      args =:
        condp eq op:
          'clear'     : qv(buffer)
          'read'      : qv(buffer pass want)
          'write'     : qv(buffer pass item)
          'overwrite' : qv(buffer pass item)
      value("op-$op") : args*
  qm:

defn op-clear(buffer):
  hash-map: :B (buffer.B.# * [nil]) :P 0

defn op-read(buffer pass want):
  cell =: buffer.B.nth(buffer.P)
  when pass:
    when-not cell:
      die: S("Can't read:\ " buffer)
    when cell != want:
      die: "Bad read:\ $cell != $want ($buffer)"
  hash-map:
    :B assoc-in(buffer.B [buffer.P] nil)
    :P (buffer.P.++ % buffer.B.#)

defn op-write(buffer pass item):
  B P =: buffer.slice(q(B P))
  I =:
    reduce \(%1 || (get(B %2).! && %2)):
      nil (range(P B.#) + range(0 P))

  if I:
    assoc-in: buffer [:B I] item
    when pass: die('Full buffer')

defn op-overwrite(buffer pass item):
  if some(nil? buffer.B):
    op-write: buffer pass item
    else:
      buffer =:
        assoc-in: buffer [:B buffer.P] item
      P =: buffer.P.++ % buffer.B.#
      assoc-in: buffer [:P] P



# TODO:
# op:operation item pass:should_succeed want:expected =: {op}
