#!/usr/bin/env ys-0

defn main(slug):
  data =:
    json/load:
      read: ".problem/exercises/$slug/canonical-data.json"

  tests =: gen-tests(data.cases)

  test =: |-
    #!/usr/bin/env ys-0

    use ys::taptest: :all
    require: '$slug.ys'
    $gen-comments(data)
    test::
    $(join("\n" tests).trimr())

    done: $count(tests)

  say: test

defn gen-tests(cases):
  loop [[case & cases] cases, tests []]:
    genned-tests =:
      if case.cases:
        gen-tests(case.cases)
        gen-test(case).vector()
    tests =: concat(tests genned-tests)
    if cases.?:
      recur cases: tests
      else: tests

defn gen-test(case):
  expected-map =:
    if case.expected.map?(): case.expected {}
  test =:
    vector:
      apply merge::
      - name:: case.description.uc1()
        code:: gen-code(case)
      - !
        if expected-map.error: +{'what' 'error'} {}
      - want:: expected-map.error || case.expected
        uuid:: case.uuid

  yaml/dump: test

defn gen-code(case):
  func =: case.property.kebab-symbol()
  args =: join(' ' case.input.vals().mapv(pr-str))
  =>: "${func}($args)"

defn gen-comments(data):
  if data.comments:
    then:
      comments =:
        data
          .comments
          .map(trim)
          .join("\n")
          .replace(/(?m)^/ '# ')
      =>: "\n$comments\n"
    else: ''

defn kebab-symbol(v):
  v.replace(/[A-Z]/ \("-" + %1.lc()))
   .replace(/_/ "-")
